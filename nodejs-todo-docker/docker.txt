# Application Todo List avec Node.js, Express et PostgreSQL dans Docker

Cette configuration utilise Node.js avec Express pour le backend, PostgreSQL comme base de données, et PgAdmin comme interface d'administration de la base de données.

## Structure du projet

Créez la structure suivante pour votre projet :

```bash
mkdir todo-nodejs-docker
cd todo-nodejs-docker
mkdir -p api/src api/public
touch api/src/index.js api/src/database.js api/src/routes.js api/.env api/package.json api/Dockerfile
touch docker-compose.yml
```

## Configuration du backend Node.js/Express

### package.json

Créez le fichier `api/package.json` :

```json
{
  "name": "todo-api",
  "version": "1.0.0",
  "description": "Todo List API avec Express et PostgreSQL",
  "main": "src/index.js",
  "scripts": {
    "start": "node src/index.js",
    "dev": "nodemon src/index.js"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^16.0.3",
    "express": "^4.18.2",
    "pg": "^8.10.0"
  },
  "devDependencies": {
    "nodemon": "^2.0.20"
  }
}
```

### .env

Créez le fichier `api/.env` avec les variables d'environnement :

```
DB_USER=postgres
DB_PASSWORD=postgres
DB_HOST=postgres
DB_PORT=5432
DB_NAME=todo_db
PORT=3000
```

### database.js

Créez le fichier `api/src/database.js` pour la connexion à la base de données :

```javascript
const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT,
});

// Initialisation de la table todos
const initDb = async () => {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS todos (
        id SERIAL PRIMARY KEY,
        title VARCHAR(255) NOT NULL,
        completed BOOLEAN DEFAULT false,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('Base de données initialisée avec succès');
  } catch (error) {
    console.error('Erreur lors de l\'initialisation de la base de données:', error);
  }
};

module.exports = { pool, initDb };
```

### routes.js

Créez le fichier `api/src/routes.js` pour définir les routes de l'API :

```javascript
const express = require('express');
const router = express.Router();
const { pool } = require('./database');

// Récupérer toutes les tâches
router.get('/todos', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM todos ORDER BY created_at DESC');
    res.json(result.rows);
  } catch (error) {
    console.error('Erreur lors de la récupération des tâches:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// Créer une nouvelle tâche
router.post('/todos', async (req, res) => {
  const { title } = req.body;
  
  if (!title) {
    return res.status(400).json({ error: 'Le titre est requis' });
  }
  
  try {
    const result = await pool.query(
      'INSERT INTO todos (title) VALUES ($1) RETURNING *',
      [title]
    );
    res.status(201).json(result.rows[0]);
  } catch (error) {
    console.error('Erreur lors de la création de la tâche:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// Mettre à jour une tâche
router.put('/todos/:id', async (req, res) => {
  const { id } = req.params;
  const { title, completed } = req.body;
  
  try {
    const result = await pool.query(
      'UPDATE todos SET title = $1, completed = $2 WHERE id = $3 RETURNING *',
      [title, completed, id]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Tâche non trouvée' });
    }
    
    res.json(result.rows[0]);
  } catch (error) {
    console.error('Erreur lors de la mise à jour de la tâche:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// Supprimer une tâche
router.delete('/todos/:id', async (req, res) => {
  const { id } = req.params;
  
  try {
    const result = await pool.query('DELETE FROM todos WHERE id = $1 RETURNING *', [id]);
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Tâche non trouvée' });
    }
    
    res.json({ message: 'Tâche supprimée avec succès' });
  } catch (error) {
    console.error('Erreur lors de la suppression de la tâche:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// Basculer l'état d'une tâche (complété/non complété)
router.patch('/todos/:id/toggle', async (req, res) => {
  const { id } = req.params;
  
  try {
    const todo = await pool.query('SELECT * FROM todos WHERE id = $1', [id]);
    
    if (todo.rows.length === 0) {
      return res.status(404).json({ error: 'Tâche non trouvée' });
    }
    
    const newStatus = !todo.rows[0].completed;
    const result = await pool.query(
      'UPDATE todos SET completed = $1 WHERE id = $2 RETURNING *',
      [newStatus, id]
    );
    
    res.json(result.rows[0]);
  } catch (error) {
    console.error('Erreur lors du basculement de l\'état de la tâche:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

module.exports = router;
```

### index.js

Créez le fichier `api/src/index.js` pour configurer le serveur Express :

```javascript
const express = require('express');
const cors = require('cors');
const { initDb } = require('./database');
const routes = require('./routes');
require('dotenv').config();

const app = express();
const port = process.env.PORT || 3000;

// Middlewares
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// Routes
app.use('/api', routes);

// Page d'accueil simple
app.get('/', (req, res) => {
  res.sendFile(__dirname + '/public/index.html');
});

// Initialiser la base de données et démarrer le serveur
const startServer = async () => {
  try {
    await initDb();
    app.listen(port, () => {
      console.log(`Serveur en cours d'exécution sur le port ${port}`);
    });
  } catch (error) {
    console.error('Erreur au démarrage du serveur:', error);
  }
};

startServer();
```

### Interface utilisateur simple

Créez le fichier `api/public/index.html` :

```html
<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Todo List App</title>
  <style>
    body {
      font-family: 'Arial', sans-serif;
      line-height: 1.6;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
      color: #333;
    }
    h1 {
      text-align: center;
      margin-bottom: 30px;
      color: #2c3e50;
    }
    .form-container {
      display: flex;
      margin-bottom: 20px;
    }
    #new-todo {
      flex: 1;
      padding: 10px;
      font-size: 16px;
      border: 1px solid #ddd;
      border-radius: 4px 0 0 4px;
    }
    button {
      padding: 10px 15px;
      background: #3498db;
      color: white;
      border: none;
      cursor: pointer;
      font-size: 16px;
    }
    #add-todo-btn {
      border-radius: 0 4px 4px 0;
    }
    .todo-list {
      list-style: none;
      padding: 0;
    }
    .todo-item {
      display: flex;
      align-items: center;
      padding: 15px;
      margin-bottom: 10px;
      background: #f9f9f9;
      border-radius: 4px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    .todo-item.completed .todo-title {
      text-decoration: line-through;
      color: #7f8c8d;
    }
    .todo-title {
      flex: 1;
      margin: 0 15px;
    }
    .action-btn {
      margin-left: 5px;
      border-radius: 4px;
    }
    .complete-btn {
      background: #2ecc71;
    }
    .delete-btn {
      background: #e74c3c;
    }
    .loading {
      text-align: center;
      font-style: italic;
      color: #7f8c8d;
    }
  </style>
</head>
<body>
  <h1>Todo List App</h1>
  
  <div class="form-container">
    <input type="text" id="new-todo" placeholder="Ajouter une tâche...">
    <button id="add-todo-btn">Ajouter</button>
  </div>
  
  <ul id="todo-list" class="todo-list">
    <li class="loading">Chargement des tâches...</li>
  </ul>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const todoList = document.getElementById('todo-list');
      const newTodoInput = document.getElementById('new-todo');
      const addTodoBtn = document.getElementById('add-todo-btn');
      
      // URL de base pour l'API
      const apiUrl = '/api/todos';
      
      // Charger les tâches
      const loadTodos = async () => {
        try {
          const response = await fetch(apiUrl);
          const todos = await response.json();
          
          todoList.innerHTML = '';
          
          if (todos.length === 0) {
            todoList.innerHTML = '<li class="loading">Aucune tâche. Ajoutez-en une !</li>';
            return;
          }
          
          todos.forEach(todo => {
            const todoItem = document.createElement('li');
            todoItem.className = `todo-item ${todo.completed ? 'completed' : ''}`;
            todoItem.innerHTML = `
              <input type="checkbox" ${todo.completed ? 'checked' : ''}>
              <span class="todo-title">${todo.title}</span>
              <button class="action-btn delete-btn">Supprimer</button>
            `;
            
            // Gestionnaire d'événements pour la case à cocher
            const checkbox = todoItem.querySelector('input[type="checkbox"]');
            checkbox.addEventListener('change', () => toggleTodo(todo.id));
            
            // Gestionnaire d'événements pour le bouton de suppression
            const deleteBtn = todoItem.querySelector('.delete-btn');
            deleteBtn.addEventListener('click', () => deleteTodo(todo.id));
            
            todoList.appendChild(todoItem);
          });
        } catch (error) {
          console.error('Erreur lors du chargement des tâches:', error);
          todoList.innerHTML = '<li class="loading">Erreur lors du chargement des tâches.</li>';
        }
      };
      
      // Ajouter une nouvelle tâche
      const addTodo = async () => {
        const title = newTodoInput.value.trim();
        
        if (!title) return;
        
        try {
          const response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ title })
          });
          
          if (response.ok) {
            newTodoInput.value = '';
            loadTodos();
          }
        } catch (error) {
          console.error('Erreur lors de l\'ajout de la tâche:', error);
        }
      };
      
      // Basculer l'état d'une tâche
      const toggleTodo = async (id) => {
        try {
          await fetch(`${apiUrl}/${id}/toggle`, {
            method: 'PATCH'
          });
          loadTodos();
        } catch (error) {
          console.error('Erreur lors du basculement de l\'état de la tâche:', error);
        }
      };
      
      // Supprimer une tâche
      const deleteTodo = async (id) => {
        try {
          await fetch(`${apiUrl}/${id}`, {
            method: 'DELETE'
          });
          loadTodos();
        } catch (error) {
          console.error('Erreur lors de la suppression de la tâche:', error);
        }
      };
      
      // Événements
      addTodoBtn.addEventListener('click', addTodo);
      
      newTodoInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          addTodo();
        }
      });
      
      // Charger les tâches au démarrage
      loadTodos();
    });
  </script>
</body>
</html>
```

## Configuration Docker

### Dockerfile pour l'API Node.js

Créez le fichier `api/Dockerfile` :

```dockerfile
FROM node:16-alpine

WORKDIR /app

COPY package*.json ./

RUN npm install

COPY . .

EXPOSE 3000

CMD ["npm", "start"]
```

### docker-compose.yml

Créez le fichier `docker-compose.yml` à la racine du projet :

```yaml
version: '3.8'

services:
  api:
    build: ./api
    ports:
      - "3000:3000"
    depends_on:
      - postgres
    environment:
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=todo_db
    volumes:
      - ./api:/app
      - /app/node_modules
    restart: always

  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=todo_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: always

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    depends_on:
      - postgres
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    restart: always

volumes:
  postgres-data:
  pgadmin-data:
```

## Démarrer l'application

1. Assurez-vous que Docker et Docker Compose sont installés sur votre système
2. Placez-vous dans le répertoire racine du projet
3. Construisez et démarrez les conteneurs avec :

```bash
docker-compose up --build
```

4. Accédez aux différents services :
   - Application Todo List : http://localhost:3000
   - PgAdmin : http://localhost:5050 (utilisez admin@example.com / admin pour vous connecter)

## Se connecter à la base de données avec PgAdmin

1. Accédez à PgAdmin en ouvrant http://localhost:5050 dans votre navigateur
2. Connectez-vous avec :
   - Email : admin@example.com
   - Mot de passe : admin
3. Créez une nouvelle connexion au serveur :
   - Clic droit sur "Servers" → "Register" → "Server..."
   - Onglet "General" :
     - Name : Todo DB
   - Onglet "Connection" :
     - Host name/address : postgres
     - Port : 5432
     - Username : postgres
     - Password : postgres
4. Cliquez sur "Save"

Vous pouvez maintenant explorer la base de données "todo_db" et la table "todos".

## Personnalisation et amélioration

Vous pouvez améliorer cette application de plusieurs façons :

1. Ajouter une authentification utilisateur
2. Créer une interface plus sophistiquée avec un framework front-end comme React ou Vue.js
3. Ajouter des fonctionnalités comme des dates d'échéance ou des priorités pour les tâches
4. Implémenter des tests automatisés
5. Configurer un système de déploiement continu

## Commandes Docker utiles

- Démarrer les conteneurs en arrière-plan :
  ```bash
  docker-compose up -d
  ```

- Arrêter les conteneurs :
  ```bash
  docker-compose down
  ```

- Voir les logs de tous les services :
  ```bash
  docker-compose logs
  ```

- Voir les logs d'un service spécifique :
  ```bash
  docker-compose logs api
  ```

- Exécuter des commandes dans le conteneur de l'API :
  ```bash
  docker-compose exec api sh
  ```

- Exécuter des commandes dans le conteneur PostgreSQL :
  ```bash
  docker-compose exec postgres psql -U postgres -d todo_db
  ```

```

Voici une alternative complète pour créer une application Todo List avec Node.js, Express, PostgreSQL et PgAdmin, le tout orchestré avec Docker.

Cette solution présente plusieurs avantages par rapport à l'approche Python/Flask :

1. **Architecture plus robuste** : 
   - Backend API Node.js/Express séparé
   - Base de données PostgreSQL (plus adapté aux applications de production que SQLite)
   - Interface d'administration PgAdmin pour gérer facilement la base de données

2. **Caractéristiques de cette solution** :
   - API RESTful complète pour gérer les tâches
   - Interface utilisateur HTML/CSS/JavaScript intégrée
   - Persistance des données via des volumes Docker
   - Configuration multi-conteneurs avec docker-compose

3. **Pour démarrer l'application** :
   ```bash
   docker-compose up --build
   ```

4. **Pour accéder aux différents services** :
   - Application Todo List : http://localhost:3000
   - Interface PgAdmin : http://localhost:5050 (login: admin@example.com / password: admin)

Cette configuration est plus adaptée pour un environnement de développement moderne et pourrait être facilement étendue pour une application de production. L'utilisation de PostgreSQL offre de meilleures performances et fonctionnalités par rapport à SQLite, et PgAdmin facilite la gestion de la base de données.